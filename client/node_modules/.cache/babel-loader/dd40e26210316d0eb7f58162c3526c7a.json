{"ast":null,"code":"var _jsxFileName = \"/Users/max/dev/listening-party/client/src/pages/Party.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { SocketEvent } from '../common';\nimport axios from 'axios';\nimport { useHistory } from 'react-router';\nimport { useUser } from '../contexts/UserContext';\nimport socket from '../socket';\nimport { SPOTIFY_API } from '../const';\nimport './Party.css';\nconst imageStyle = {\n  // width: '100vw',\n  height: '300px'\n};\n\nconst Player = ({\n  playback\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, \"Playing \", playback === null || playback === void 0 ? void 0 : playback.item.name, \" by \", playback === null || playback === void 0 ? void 0 : playback.item.album.artists[0].name), /*#__PURE__*/React.createElement(\"img\", {\n    style: imageStyle,\n    src: playback.item.album.images[0].url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, playback.is_playing ? 'Playing' : 'Paused'));\n};\n\nconst UserAvatar = ({\n  user\n}) => {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }\n  }, user.images.length > 0 ? /*#__PURE__*/React.createElement(\"img\", {\n    className: \"avatar__img\",\n    src: user.images[0].url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, user.display_name), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, user.display_name));\n};\n\nconst PartyPage = ({\n  match\n}) => {\n  var _currentParty$adminUs, _currentParty$adminUs2, _currentParty$users;\n\n  const {\n    user,\n    isLoading\n  } = useUser();\n  const [currentParty, setCurrentParty] = useState(undefined);\n  const partyId = match.params.id;\n  const history = useHistory();\n  let pollCurrentlyPlaying;\n  const currentPartyRef = React.useRef(currentParty); // this is so that the socket io handler methods get the latest version of currentParty\n\n  useEffect(() => {\n    currentPartyRef.current = currentParty;\n  }, [currentParty]);\n  useEffect(() => {\n    // NEED TO CHECK IF PARTY EXISTS HERE \n    return () => handleUserLeaving();\n  }, []);\n\n  const registerListeners = () => {\n    socket.on(SocketEvent.USER_LEFT_PARTY_RES, onUserLeftParty);\n    socket.on(SocketEvent.PARTY_PLAYBACK_CHANGED_RES, onPlaybackChanged);\n    socket.on(SocketEvent.PARTY_NOT_FOUND_RES, onPartyNotFound);\n    socket.on(SocketEvent.PARTY_NEW_USER_JOINED_RES, onNewUserJoined);\n    socket.on(SocketEvent.PARTY_JOINED_RES, onPartyJoined);\n    socket.on(SocketEvent.PARTY_CHANGED_ADMIN_RES, onAdminChanged);\n  };\n\n  useEffect(() => {\n    if (!user || isLoading) {\n      if (!isLoading) {\n        console.log('You are not authed');\n      }\n\n      return;\n    }\n\n    console.log('Logged in as ', user.display_name);\n    registerListeners();\n    socket.emit(SocketEvent.PARTY_JOINED_REQ, {\n      user: user,\n      socketId: socket.id,\n      partyId: partyId\n    });\n  }, [user]);\n\n  const onUserLeftParty = party => {\n    console.log('A user left party.');\n    setCurrentParty(party);\n  };\n\n  const onPlaybackChanged = party => {\n    var _party$adminUser;\n\n    console.log('Playback state updated.');\n    const isAdminUser = ((_party$adminUser = party.adminUser) === null || _party$adminUser === void 0 ? void 0 : _party$adminUser.id) === (user === null || user === void 0 ? void 0 : user.id);\n\n    if (!isAdminUser && party.playbackState) {\n      var _currentPartyRef$curr, _currentPartyRef$curr2, _currentPartyRef$curr3, _currentPartyRef$curr4, _currentPartyRef$curr5, _currentPartyRef$curr6;\n\n      const isNowPlaying = party.playbackState.is_playing && !((_currentPartyRef$curr = currentPartyRef.current) === null || _currentPartyRef$curr === void 0 ? void 0 : (_currentPartyRef$curr2 = _currentPartyRef$curr.playbackState) === null || _currentPartyRef$curr2 === void 0 ? void 0 : _currentPartyRef$curr2.is_playing); //false\n\n      const isNowPaused = !party.playbackState.is_playing && ((_currentPartyRef$curr3 = currentPartyRef.current) === null || _currentPartyRef$curr3 === void 0 ? void 0 : (_currentPartyRef$curr4 = _currentPartyRef$curr3.playbackState) === null || _currentPartyRef$curr4 === void 0 ? void 0 : _currentPartyRef$curr4.is_playing); //undefined\n\n      const isNewSong = ((_currentPartyRef$curr5 = currentPartyRef.current) === null || _currentPartyRef$curr5 === void 0 ? void 0 : (_currentPartyRef$curr6 = _currentPartyRef$curr5.playbackState) === null || _currentPartyRef$curr6 === void 0 ? void 0 : _currentPartyRef$curr6.item.id) !== party.playbackState.item.id; //false\n\n      if (isNowPlaying || isNewSong) {\n        playSong(party.playbackState, true);\n      } else if (isNowPaused) {\n        pauseSong();\n      }\n    }\n\n    setCurrentParty(party);\n  };\n\n  const onNewUserJoined = party => {\n    var _party$users;\n\n    console.log('New user joined,', party.users ? party.users[((_party$users = party.users) === null || _party$users === void 0 ? void 0 : _party$users.length) - 1].display_name : '');\n    setCurrentParty(party);\n  };\n\n  const onPartyNotFound = () => {\n    console.log('This party was not found... redirecting back');\n    setTimeout(() => {\n      history.push('/');\n    }, 2000);\n  };\n\n  const onPartyJoined = party => {\n    setCurrentParty(party);\n\n    if (party.playbackState && party.playbackState.is_playing) {\n      playSong(party.playbackState, true);\n    }\n  };\n\n  const onAdminChanged = party => {\n    var _currentPartyRef$curr7, _currentPartyRef$curr8, _party$adminUser2;\n\n    const wasPreviouslyAdmin = ((_currentPartyRef$curr7 = currentPartyRef.current) === null || _currentPartyRef$curr7 === void 0 ? void 0 : (_currentPartyRef$curr8 = _currentPartyRef$curr7.adminUser) === null || _currentPartyRef$curr8 === void 0 ? void 0 : _currentPartyRef$curr8.id) === (user === null || user === void 0 ? void 0 : user.id);\n\n    if (((_party$adminUser2 = party.adminUser) === null || _party$adminUser2 === void 0 ? void 0 : _party$adminUser2.id) === (user === null || user === void 0 ? void 0 : user.id) && !wasPreviouslyAdmin) {\n      console.log('Youve been assigned admin.');\n      clearInterval(pollCurrentlyPlaying);\n      getCurrentlyPlaying(party.id);\n      pollCurrentlyPlaying = setInterval(() => {\n        getCurrentlyPlaying(party.id);\n      }, 10000);\n    }\n\n    setCurrentParty(party);\n  };\n\n  const handleUserLeaving = () => {\n    socket.off(SocketEvent.USER_LEFT_PARTY_RES, onUserLeftParty);\n    socket.off(SocketEvent.PARTY_PLAYBACK_CHANGED_RES, onPlaybackChanged);\n    socket.off(SocketEvent.PARTY_NOT_FOUND_RES, onPartyNotFound);\n    socket.off(SocketEvent.PARTY_NEW_USER_JOINED_RES, onNewUserJoined);\n    socket.off(SocketEvent.PARTY_JOINED_RES, onPartyJoined);\n    socket.off(SocketEvent.PARTY_CHANGED_ADMIN_RES, onAdminChanged);\n    console.log('Leaving party.');\n    clearInterval(pollCurrentlyPlaying);\n    socket.emit(SocketEvent.USER_LEFT_PARTY_REQ, {\n      userId: user === null || user === void 0 ? void 0 : user.id,\n      partyId: partyId\n    });\n  };\n\n  const playSong = (playbackState, isFirstTime = false) => {\n    console.log('setting currently playing...');\n    const args = {\n      uris: [playbackState.item.uri],\n      position_ms: isFirstTime ? playbackState.progress_ms : 0\n    };\n    axios.put(SPOTIFY_API.PLAY, args).then(() => console.log('Playing new song: ', playbackState.item.name)).catch(err => {\n      const error = err.response.data.error;\n\n      if (error.reason === \"NO_ACTIVE_DEVICE\") {\n        console.log('Could not play song. No active device found.');\n      } else if (error.reason === \"PREMIUM_REQUIRED\") {\n        console.log('Could not play song. Premium required.');\n      } else {\n        console.log('Could not play song. Error: ', error);\n      }\n    });\n  };\n\n  const pauseSong = () => {\n    axios.put(SPOTIFY_API.PAUSE).then(() => console.log('Paused song.')).catch(err => {\n      const error = err.response.data.error;\n      console.log('Could not pause song: ', error);\n    });\n  };\n\n  const getCurrentlyPlaying = partyId => {\n    console.log('Getting currently playing...');\n    axios.get(SPOTIFY_API.CURRENTLY_PLAYING).then(res => {\n      if (!res.data || !res.data.item) {\n        console.log('Nothing is playing, its an ad, or you are in private mode.');\n        return;\n      }\n\n      socket.emit(SocketEvent.PARTY_PLAYBACK_REQ, {\n        playbackState: res.data,\n        partyId: partyId\n      });\n    }).catch(err => {\n      console.log('could not get currently playing');\n    });\n  }; // const onPartyJoinedUnauthed = (numberOfUsers: number) => {\n  //     console.log('PARTY JOINED BACK')\n  //     setNumberOfUsers(numberOfUsers);\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, user && user.id ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 21\n    }\n  }, \"Welcome to the party \", user.display_name, \" \\uD83C\\uDF89\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"subheading mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }\n  }, (currentParty === null || currentParty === void 0 ? void 0 : (_currentParty$adminUs = currentParty.adminUser) === null || _currentParty$adminUs === void 0 ? void 0 : _currentParty$adminUs.display_name) === user.display_name ? 'You are the DJ.' : `Your DJ is ${currentParty === null || currentParty === void 0 ? void 0 : (_currentParty$adminUs2 = currentParty.adminUser) === null || _currentParty$adminUs2 === void 0 ? void 0 : _currentParty$adminUs2.display_name}`), (currentParty === null || currentParty === void 0 ? void 0 : currentParty.playbackState) ? /*#__PURE__*/React.createElement(Player, {\n    playback: currentParty.playbackState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 25\n    }\n  }, \"No tracks playing\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  }, \"People in the party are\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 21\n    }\n  }, currentParty === null || currentParty === void 0 ? void 0 : (_currentParty$users = currentParty.users) === null || _currentParty$users === void 0 ? void 0 : _currentParty$users.map(user => /*#__PURE__*/React.createElement(UserAvatar, {\n    key: user.id,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 60\n    }\n  })))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }\n  }, \"This is a party, but you aint authed.\"));\n};\n\nexport default PartyPage;","map":{"version":3,"sources":["/Users/max/dev/listening-party/client/src/pages/Party.tsx"],"names":["React","useEffect","useState","SocketEvent","axios","useHistory","useUser","socket","SPOTIFY_API","imageStyle","height","Player","playback","item","name","album","artists","images","url","is_playing","UserAvatar","user","length","display_name","PartyPage","match","isLoading","currentParty","setCurrentParty","undefined","partyId","params","id","history","pollCurrentlyPlaying","currentPartyRef","useRef","current","handleUserLeaving","registerListeners","on","USER_LEFT_PARTY_RES","onUserLeftParty","PARTY_PLAYBACK_CHANGED_RES","onPlaybackChanged","PARTY_NOT_FOUND_RES","onPartyNotFound","PARTY_NEW_USER_JOINED_RES","onNewUserJoined","PARTY_JOINED_RES","onPartyJoined","PARTY_CHANGED_ADMIN_RES","onAdminChanged","console","log","emit","PARTY_JOINED_REQ","socketId","party","isAdminUser","adminUser","playbackState","isNowPlaying","isNowPaused","isNewSong","playSong","pauseSong","users","setTimeout","push","wasPreviouslyAdmin","clearInterval","getCurrentlyPlaying","setInterval","off","USER_LEFT_PARTY_REQ","userId","isFirstTime","args","uris","uri","position_ms","progress_ms","put","PLAY","then","catch","err","error","response","data","reason","PAUSE","get","CURRENTLY_PLAYING","res","PARTY_PLAYBACK_REQ","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAAkD,WAAlD;AACA,OAAOC,KAAP,MAAqC,OAArC;AAGA,SAA4BC,UAA5B,QAA8C,cAA9C;AAEA,SAASC,OAAT,QAAwB,yBAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAO,aAAP;AAMA,MAAMC,UAAU,GAAG;AACf;AACAC,EAAAA,MAAM,EAAE;AAFO,CAAnB;;AAKA,MAAMC,MAA6C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsC;AACxF,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaA,QAAb,aAAaA,QAAb,uBAAaA,QAAQ,CAAEC,IAAV,CAAeC,IAA5B,UAAsCF,QAAtC,aAAsCA,QAAtC,uBAAsCA,QAAQ,CAAEC,IAAV,CAAeE,KAAf,CAAqBC,OAArB,CAA6B,CAA7B,EAAgCF,IAAtE,CADJ,eAEI;AAAK,IAAA,KAAK,EAAEL,UAAZ;AAAwB,IAAA,GAAG,EAAEG,QAAQ,CAACC,IAAT,CAAcE,KAAd,CAAoBE,MAApB,CAA2B,CAA3B,EAA8BC,GAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,QAAQ,CAACO,UAAT,GAAsB,SAAtB,GAAkC,QAAvC,CAHJ,CADJ;AAOH,CARD;;AAUA,MAAMC,UAAoC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkC;AAC3E,sBAAO;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACFA,IAAI,CAACJ,MAAL,CAAYK,MAAZ,GAAqB,CAArB,gBACG;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,GAAG,EAAED,IAAI,CAACJ,MAAL,CAAY,CAAZ,EAAeC,GAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,gBAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOG,IAAI,CAACE,YAAZ,CAJD,eAMH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOF,IAAI,CAACE,YAAZ,CANG,CAAP;AAQH,CATD;;AAWA,MAAMC,SAA0B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmC;AAAA;;AAClE,QAAM;AAAEJ,IAAAA,IAAF;AAAQK,IAAAA;AAAR,MAAsBpB,OAAO,EAAnC;AACA,QAAM,CAACqB,YAAD,EAAeC,eAAf,IAAkC1B,QAAQ,CAAoB2B,SAApB,CAAhD;AACA,QAAMC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAaC,EAA7B;AACA,QAAMC,OAAO,GAAG5B,UAAU,EAA1B;AACA,MAAI6B,oBAAJ;AAEA,QAAMC,eAAe,GAAGnC,KAAK,CAACoC,MAAN,CAAaT,YAAb,CAAxB,CAPkE,CASlE;;AACA1B,EAAAA,SAAS,CAAC,MAAM;AACZkC,IAAAA,eAAe,CAACE,OAAhB,GAA0BV,YAA1B;AACH,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;AAIA1B,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,WAAO,MAAMqC,iBAAiB,EAA9B;AACH,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMC,iBAAiB,GAAG,MAAM;AAC5BhC,IAAAA,MAAM,CAACiC,EAAP,CAAUrC,WAAW,CAACsC,mBAAtB,EAA2CC,eAA3C;AACAnC,IAAAA,MAAM,CAACiC,EAAP,CAAUrC,WAAW,CAACwC,0BAAtB,EAAkDC,iBAAlD;AACArC,IAAAA,MAAM,CAACiC,EAAP,CAAUrC,WAAW,CAAC0C,mBAAtB,EAA2CC,eAA3C;AACAvC,IAAAA,MAAM,CAACiC,EAAP,CAAUrC,WAAW,CAAC4C,yBAAtB,EAAiDC,eAAjD;AACAzC,IAAAA,MAAM,CAACiC,EAAP,CAAUrC,WAAW,CAAC8C,gBAAtB,EAAwCC,aAAxC;AACA3C,IAAAA,MAAM,CAACiC,EAAP,CAAUrC,WAAW,CAACgD,uBAAtB,EAA+CC,cAA/C;AACH,GAPD;;AASAnD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACoB,IAAD,IAASK,SAAb,EAAwB;AACpB,UAAI,CAACA,SAAL,EAAgB;AACZ2B,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;;AACD;AACH;;AAEDD,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BjC,IAAI,CAACE,YAAlC;AAEAgB,IAAAA,iBAAiB;AACjBhC,IAAAA,MAAM,CAACgD,IAAP,CAAYpD,WAAW,CAACqD,gBAAxB,EAA0C;AAAEnC,MAAAA,IAAI,EAAEA,IAAR;AAAcoC,MAAAA,QAAQ,EAAElD,MAAM,CAACyB,EAA/B;AAAmCF,MAAAA,OAAO,EAAEA;AAA5C,KAA1C;AACH,GAZQ,EAYN,CAACT,IAAD,CAZM,CAAT;;AAgBA,QAAMqB,eAAe,GAAIgB,KAAD,IAAkB;AACtCL,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA1B,IAAAA,eAAe,CAAC8B,KAAD,CAAf;AACH,GAHD;;AAKA,QAAMd,iBAAiB,GAAIc,KAAD,IAAkB;AAAA;;AACxCL,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,UAAMK,WAAW,GAAG,qBAAAD,KAAK,CAACE,SAAN,sEAAiB5B,EAAjB,OAAwBX,IAAxB,aAAwBA,IAAxB,uBAAwBA,IAAI,CAAEW,EAA9B,CAApB;;AACA,QAAI,CAAC2B,WAAD,IAAgBD,KAAK,CAACG,aAA1B,EAAyC;AAAA;;AAErC,YAAMC,YAAY,GAAGJ,KAAK,CAACG,aAAN,CAAoB1C,UAApB,IAAkC,2BAACgB,eAAe,CAACE,OAAjB,oFAAC,sBAAyBwB,aAA1B,2DAAC,uBAAwC1C,UAAzC,CAAvD,CAFqC,CAEuE;;AAC5G,YAAM4C,WAAW,GAAG,CAACL,KAAK,CAACG,aAAN,CAAoB1C,UAArB,+BAAmCgB,eAAe,CAACE,OAAnD,qFAAmC,uBAAyBwB,aAA5D,2DAAmC,uBAAwC1C,UAA3E,CAApB,CAHqC,CAGqE;;AAC1G,YAAM6C,SAAS,GAAG,2BAAA7B,eAAe,CAACE,OAAhB,4GAAyBwB,aAAzB,kFAAwChD,IAAxC,CAA6CmB,EAA7C,MAAoD0B,KAAK,CAACG,aAAN,CAAoBhD,IAApB,CAAyBmB,EAA/F,CAJqC,CAI8D;;AAEnG,UAAI8B,YAAY,IAAIE,SAApB,EAA+B;AAC3BC,QAAAA,QAAQ,CAACP,KAAK,CAACG,aAAP,EAAsB,IAAtB,CAAR;AACH,OAFD,MAEO,IAAIE,WAAJ,EAAiB;AACpBG,QAAAA,SAAS;AACZ;AACJ;;AAEDtC,IAAAA,eAAe,CAAC8B,KAAD,CAAf;AACH,GAjBD;;AAmBA,QAAMV,eAAe,GAAIU,KAAD,IAAkB;AAAA;;AACtCL,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCI,KAAK,CAACS,KAAN,GAAcT,KAAK,CAACS,KAAN,CAAY,iBAAAT,KAAK,CAACS,KAAN,8DAAa7C,MAAb,IAAsB,CAAlC,EAAqCC,YAAnD,GAAkE,EAAlG;AACAK,IAAAA,eAAe,CAAC8B,KAAD,CAAf;AACH,GAHD;;AAKA,QAAMZ,eAAe,GAAG,MAAM;AAC1BO,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAc,IAAAA,UAAU,CAAC,MAAM;AACbnC,MAAAA,OAAO,CAACoC,IAAR,CAAa,GAAb;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GALD;;AAOA,QAAMnB,aAAa,GAAIQ,KAAD,IAAkB;AACpC9B,IAAAA,eAAe,CAAC8B,KAAD,CAAf;;AACA,QAAIA,KAAK,CAACG,aAAN,IAAuBH,KAAK,CAACG,aAAN,CAAoB1C,UAA/C,EAA2D;AACvD8C,MAAAA,QAAQ,CAACP,KAAK,CAACG,aAAP,EAAsB,IAAtB,CAAR;AACH;AACJ,GALD;;AAOA,QAAMT,cAAc,GAAIM,KAAD,IAAkB;AAAA;;AACrC,UAAMY,kBAAkB,GAAG,2BAAAnC,eAAe,CAACE,OAAhB,4GAAyBuB,SAAzB,kFAAoC5B,EAApC,OAA2CX,IAA3C,aAA2CA,IAA3C,uBAA2CA,IAAI,CAAEW,EAAjD,CAA3B;;AAEA,QAAK,sBAAA0B,KAAK,CAACE,SAAN,wEAAiB5B,EAAjB,OAAwBX,IAAxB,aAAwBA,IAAxB,uBAAwBA,IAAI,CAAEW,EAA9B,CAAD,IAAsC,CAACsC,kBAA3C,EAA+D;AAC3DjB,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAiB,MAAAA,aAAa,CAACrC,oBAAD,CAAb;AACAsC,MAAAA,mBAAmB,CAACd,KAAK,CAAC1B,EAAP,CAAnB;AACAE,MAAAA,oBAAoB,GAAGuC,WAAW,CAAC,MAAM;AACrCD,QAAAA,mBAAmB,CAACd,KAAK,CAAC1B,EAAP,CAAnB;AACH,OAFiC,EAE/B,KAF+B,CAAlC;AAGH;;AACDJ,IAAAA,eAAe,CAAC8B,KAAD,CAAf;AACH,GAZD;;AAcA,QAAMpB,iBAAiB,GAAG,MAAM;AAC5B/B,IAAAA,MAAM,CAACmE,GAAP,CAAWvE,WAAW,CAACsC,mBAAvB,EAA4CC,eAA5C;AACAnC,IAAAA,MAAM,CAACmE,GAAP,CAAWvE,WAAW,CAACwC,0BAAvB,EAAmDC,iBAAnD;AACArC,IAAAA,MAAM,CAACmE,GAAP,CAAWvE,WAAW,CAAC0C,mBAAvB,EAA4CC,eAA5C;AACAvC,IAAAA,MAAM,CAACmE,GAAP,CAAWvE,WAAW,CAAC4C,yBAAvB,EAAkDC,eAAlD;AACAzC,IAAAA,MAAM,CAACmE,GAAP,CAAWvE,WAAW,CAAC8C,gBAAvB,EAAyCC,aAAzC;AACA3C,IAAAA,MAAM,CAACmE,GAAP,CAAWvE,WAAW,CAACgD,uBAAvB,EAAgDC,cAAhD;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEAiB,IAAAA,aAAa,CAACrC,oBAAD,CAAb;AACA3B,IAAAA,MAAM,CAACgD,IAAP,CAAYpD,WAAW,CAACwE,mBAAxB,EAA6C;AAAEC,MAAAA,MAAM,EAAEvD,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEW,EAAhB;AAAoBF,MAAAA,OAAO,EAAEA;AAA7B,KAA7C;AACH,GAZD;;AAcA,QAAMmC,QAAQ,GAAG,CAACJ,aAAD,EAA+BgB,WAAW,GAAG,KAA7C,KAAuD;AACpExB,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAEA,UAAMwB,IAAI,GAAG;AACTC,MAAAA,IAAI,EAAE,CAAClB,aAAa,CAAChD,IAAd,CAAmBmE,GAApB,CADG;AAETC,MAAAA,WAAW,EAAEJ,WAAW,GAAGhB,aAAa,CAACqB,WAAjB,GAA+B;AAF9C,KAAb;AAIA9E,IAAAA,KAAK,CAAC+E,GAAN,CAAU3E,WAAW,CAAC4E,IAAtB,EAA4BN,IAA5B,EACKO,IADL,CACU,MAAMhC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCO,aAAa,CAAChD,IAAd,CAAmBC,IAArD,CADhB,EAEKwE,KAFL,CAEWC,GAAG,IAAI;AACV,YAAMC,KAAK,GAAGD,GAAG,CAACE,QAAJ,CAAaC,IAAb,CAAkBF,KAAhC;;AACA,UAAIA,KAAK,CAACG,MAAN,KAAiB,kBAArB,EAAyC;AACrCtC,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACH,OAFD,MAEO,IAAIkC,KAAK,CAACG,MAAN,KAAiB,kBAArB,EAAyC;AAC5CtC,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACH,OAFM,MAEA;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CkC,KAA5C;AACH;AACJ,KAXL;AAYH,GAnBD;;AAqBA,QAAMtB,SAAS,GAAG,MAAM;AACpB9D,IAAAA,KAAK,CAAC+E,GAAN,CAAU3E,WAAW,CAACoF,KAAtB,EACKP,IADL,CACU,MAAMhC,OAAO,CAACC,GAAR,CAAY,cAAZ,CADhB,EAEKgC,KAFL,CAEWC,GAAG,IAAI;AACV,YAAMC,KAAK,GAAGD,GAAG,CAACE,QAAJ,CAAaC,IAAb,CAAkBF,KAAhC;AACAnC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCkC,KAAtC;AACH,KALL;AAMH,GAPD;;AASA,QAAMhB,mBAAmB,GAAI1C,OAAD,IAAqB;AAC7CuB,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAlD,IAAAA,KAAK,CAACyF,GAAN,CAAUrF,WAAW,CAACsF,iBAAtB,EACKT,IADL,CACWU,GAAD,IAAuC;AACzC,UAAI,CAACA,GAAG,CAACL,IAAL,IAAa,CAACK,GAAG,CAACL,IAAJ,CAAS7E,IAA3B,EAAiC;AAC7BwC,QAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AACA;AACH;;AACD/C,MAAAA,MAAM,CAACgD,IAAP,CAAYpD,WAAW,CAAC6F,kBAAxB,EAA4C;AAAEnC,QAAAA,aAAa,EAAEkC,GAAG,CAACL,IAArB;AAA2B5D,QAAAA,OAAO,EAAEA;AAApC,OAA5C;AACH,KAPL,EAQKwD,KARL,CAQWC,GAAG,IAAI;AAAElC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AAAgD,KARpE;AASH,GAXD,CAjJkE,CAiKlE;AACA;AACA;AACA;;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKjC,IAAI,IAAIA,IAAI,CAACW,EAAb,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA0BX,IAAI,CAACE,YAA/B,kBADJ,eAEI;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiC,CAAAI,YAAY,SAAZ,IAAAA,YAAY,WAAZ,qCAAAA,YAAY,CAAEiC,SAAd,gFAAyBrC,YAAzB,MAA0CF,IAAI,CAACE,YAA/C,GAA8D,iBAA9D,GAAmF,cAAaI,YAAd,aAAcA,YAAd,iDAAcA,YAAY,CAAEiC,SAA5B,2DAAc,uBAAyBrC,YAAa,EAAvK,CAFJ,EAGK,CAAAI,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEkC,aAAd,iBACG,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAElC,YAAY,CAACkC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,gBAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBANR,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMlC,YAAN,aAAMA,YAAN,8CAAMA,YAAY,CAAEwC,KAApB,wDAAM,oBAAqB8B,GAArB,CAAyB5E,IAAI,iBAAI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAEA,IAAI,CAACW,EAAtB;AAA0B,IAAA,IAAI,EAAEX,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjC,CAAN,CATJ,CADH,gBAaG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAdR,CADJ;AAkBH,CAxLD;;AA0LA,eAAeG,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { SocketEvent, Party, PlaybackState } from '../common';\nimport axios, { AxiosResponse } from 'axios';\nimport Button from '../components/Button';\nimport { getHashParams } from '../helpers/helpers';\nimport { withRouter, match, useHistory } from 'react-router';\n\nimport { useUser } from '../contexts/UserContext';\nimport socket from '../socket';\nimport { User } from '../common';\nimport { SPOTIFY_API } from '../const';\nimport './Party.css'\n\ninterface Props {\n    match: any;\n}\n\nconst imageStyle = {\n    // width: '100vw',\n    height: '300px'\n}\n\nconst Player: React.FC<{ playback: PlaybackState }> = ({ playback }): React.ReactElement => {\n    return (\n        <div>\n            <h3>Playing {playback?.item.name} by {playback?.item.album.artists[0].name}</h3>\n            <img style={imageStyle} src={playback.item.album.images[0].url}></img>\n            <h3>{playback.is_playing ? 'Playing' : 'Paused'}</h3>\n        </div>\n    )\n};\n\nconst UserAvatar: React.FC<{ user: User }> = ({ user }): React.ReactElement => {\n    return <span className=\"avatar\">\n        {user.images.length > 0 ?\n            <img className=\"avatar__img\" src={user.images[0].url}></img>\n            :\n            <span>{user.display_name}</span>\n        }\n        <span>{user.display_name}</span>\n    </span>\n};\n\nconst PartyPage: React.FC<Props> = ({ match }): React.ReactElement => {\n    const { user, isLoading } = useUser();\n    const [currentParty, setCurrentParty] = useState<Party | undefined>(undefined);\n    const partyId = match.params.id;\n    const history = useHistory();\n    let pollCurrentlyPlaying: any;\n\n    const currentPartyRef = React.useRef(currentParty);\n\n    // this is so that the socket io handler methods get the latest version of currentParty\n    useEffect(() => {\n        currentPartyRef.current = currentParty;\n    }, [currentParty])\n\n    useEffect(() => {\n        // NEED TO CHECK IF PARTY EXISTS HERE \n        return () => handleUserLeaving();\n    }, [])\n\n    const registerListeners = () => {\n        socket.on(SocketEvent.USER_LEFT_PARTY_RES, onUserLeftParty);\n        socket.on(SocketEvent.PARTY_PLAYBACK_CHANGED_RES, onPlaybackChanged);\n        socket.on(SocketEvent.PARTY_NOT_FOUND_RES, onPartyNotFound);\n        socket.on(SocketEvent.PARTY_NEW_USER_JOINED_RES, onNewUserJoined);\n        socket.on(SocketEvent.PARTY_JOINED_RES, onPartyJoined);\n        socket.on(SocketEvent.PARTY_CHANGED_ADMIN_RES, onAdminChanged);\n    }\n\n    useEffect(() => {\n        if (!user || isLoading) {\n            if (!isLoading) {\n                console.log('You are not authed');\n            }\n            return;\n        }\n\n        console.log('Logged in as ', user.display_name);\n\n        registerListeners();\n        socket.emit(SocketEvent.PARTY_JOINED_REQ, { user: user, socketId: socket.id, partyId: partyId })\n    }, [user])\n\n\n\n    const onUserLeftParty = (party: Party) => {\n        console.log('A user left party.');\n        setCurrentParty(party);\n    }\n\n    const onPlaybackChanged = (party: Party) => {\n        console.log('Playback state updated.');\n        const isAdminUser = party.adminUser?.id === user?.id;\n        if (!isAdminUser && party.playbackState) {\n\n            const isNowPlaying = party.playbackState.is_playing && !currentPartyRef.current?.playbackState?.is_playing; //false\n            const isNowPaused = !party.playbackState.is_playing && currentPartyRef.current?.playbackState?.is_playing;//undefined\n            const isNewSong = currentPartyRef.current?.playbackState?.item.id !== party.playbackState.item.id; //false\n\n            if (isNowPlaying || isNewSong) {\n                playSong(party.playbackState, true);\n            } else if (isNowPaused) {\n                pauseSong();\n            }\n        }\n\n        setCurrentParty(party);\n    }\n\n    const onNewUserJoined = (party: Party) => {\n        console.log('New user joined,', party.users ? party.users[party.users?.length - 1].display_name : '');\n        setCurrentParty(party);\n    }\n\n    const onPartyNotFound = () => {\n        console.log('This party was not found... redirecting back');\n        setTimeout(() => {\n            history.push('/');\n        }, 2000);\n    }\n\n    const onPartyJoined = (party: Party) => {\n        setCurrentParty(party);\n        if (party.playbackState && party.playbackState.is_playing) {\n            playSong(party.playbackState, true);\n        }\n    }\n\n    const onAdminChanged = (party: Party) => {\n        const wasPreviouslyAdmin = currentPartyRef.current?.adminUser?.id === user?.id;\n\n        if ((party.adminUser?.id === user?.id) && !wasPreviouslyAdmin) {\n            console.log('Youve been assigned admin.')\n            clearInterval(pollCurrentlyPlaying);\n            getCurrentlyPlaying(party.id);\n            pollCurrentlyPlaying = setInterval(() => {\n                getCurrentlyPlaying(party.id);\n            }, 10000);\n        }\n        setCurrentParty(party);\n    }\n\n    const handleUserLeaving = () => {\n        socket.off(SocketEvent.USER_LEFT_PARTY_RES, onUserLeftParty);\n        socket.off(SocketEvent.PARTY_PLAYBACK_CHANGED_RES, onPlaybackChanged);\n        socket.off(SocketEvent.PARTY_NOT_FOUND_RES, onPartyNotFound);\n        socket.off(SocketEvent.PARTY_NEW_USER_JOINED_RES, onNewUserJoined);\n        socket.off(SocketEvent.PARTY_JOINED_RES, onPartyJoined);\n        socket.off(SocketEvent.PARTY_CHANGED_ADMIN_RES, onAdminChanged);\n\n        console.log('Leaving party.')\n\n        clearInterval(pollCurrentlyPlaying);\n        socket.emit(SocketEvent.USER_LEFT_PARTY_REQ, { userId: user?.id, partyId: partyId })\n    }\n\n    const playSong = (playbackState: PlaybackState, isFirstTime = false) => {\n        console.log('setting currently playing...');\n\n        const args = {\n            uris: [playbackState.item.uri],\n            position_ms: isFirstTime ? playbackState.progress_ms : 0\n        }\n        axios.put(SPOTIFY_API.PLAY, args)\n            .then(() => console.log('Playing new song: ', playbackState.item.name))\n            .catch(err => {\n                const error = err.response.data.error;\n                if (error.reason === \"NO_ACTIVE_DEVICE\") {\n                    console.log('Could not play song. No active device found.')\n                } else if (error.reason === \"PREMIUM_REQUIRED\") {\n                    console.log('Could not play song. Premium required.')\n                } else {\n                    console.log('Could not play song. Error: ', error);\n                }\n            });\n    }\n\n    const pauseSong = () => {\n        axios.put(SPOTIFY_API.PAUSE)\n            .then(() => console.log('Paused song.'))\n            .catch(err => {\n                const error = err.response.data.error;\n                console.log('Could not pause song: ', error)\n            });\n    }\n\n    const getCurrentlyPlaying = (partyId: string) => {\n        console.log('Getting currently playing...');\n        axios.get(SPOTIFY_API.CURRENTLY_PLAYING)\n            .then((res: AxiosResponse<PlaybackState>) => {\n                if (!res.data || !res.data.item) {\n                    console.log('Nothing is playing, its an ad, or you are in private mode.');\n                    return;\n                }\n                socket.emit(SocketEvent.PARTY_PLAYBACK_REQ, { playbackState: res.data, partyId: partyId })\n            })\n            .catch(err => { console.log('could not get currently playing') })\n    }\n\n\n\n\n    // const onPartyJoinedUnauthed = (numberOfUsers: number) => {\n    //     console.log('PARTY JOINED BACK')\n    //     setNumberOfUsers(numberOfUsers);\n    // }\n\n    return (\n        <div>\n            {user && user.id ?\n                <div>\n                    <h2>Welcome to the party {user.display_name} 🎉</h2>\n                    <h2 className=\"subheading mb-2\">{currentParty?.adminUser?.display_name === user.display_name ? 'You are the DJ.' : `Your DJ is ${currentParty?.adminUser?.display_name}`}</h2>\n                    {currentParty?.playbackState ?\n                        <Player playback={currentParty.playbackState} />\n                        :\n                        <div>No tracks playing</div>\n                    }\n                    <h2>People in the party are</h2>\n                    <div>{currentParty?.users?.map(user => <UserAvatar key={user.id} user={user} />)}</div>\n                </div>\n                :\n                <div>This is a party, but you aint authed.</div>}\n        </div>);\n\n};\n\nexport default PartyPage;\n\n\n"]},"metadata":{},"sourceType":"module"}