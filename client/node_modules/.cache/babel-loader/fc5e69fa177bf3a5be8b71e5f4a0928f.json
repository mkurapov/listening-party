{"ast":null,"code":"var _jsxFileName = \"/Users/max/dev/listening-party/client/src/contexts/AuthContext.tsx\";\nimport React from 'react'; // import { FullPageSpinner } from '../components/lib'\n\nconst AuthContext = React.createContext({\n  login: () => {},\n  register: () => {},\n  logout: () => {}\n});\n\nconst AuthProvider = () => {\n  // code for pre-loading the user's information if we have their token in\n  // localStorage goes here\n  // ðŸš¨ this is the important bit.\n  // Normally your provider components render the context provider with a value.\n  // But we post-pone rendering any of the children until after we've determined\n  // whether or not we have a user token and if we do, then we render a spinner\n  // while we go retrieve that user's information.\n  // if (weAreStillWaitingToGetTheUserData) {\n  //     return <FullPageSpinner />\n  // }\n  const login = () => {}; // make a login request\n\n\n  const register = () => {}; // register the user\n\n\n  const logout = () => {}; // clear the token in localStorage and the user data\n  // note, I'm not bothering to optimize this `value` with React.useMemo here\n  // because this is the top-most component rendered in our app and it will very\n  // rarely re-render/cause a performance problem.\n\n\n  const authenticationContext = {\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: authenticationContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  });\n};\n\nconst useAuth = () => React.useContext(AuthContext);\n\nexport { AuthProvider, useAuth }; // the UserProvider in user-context.js is basically:\n// const UserProvider = props => (\n//   <UserContext.Provider value={useAuth().data.user} {...props} />\n// )\n// and the useUser hook is basically this:\n// const useUser = () => React.useContext(UserContext)","map":{"version":3,"sources":["/Users/max/dev/listening-party/client/src/contexts/AuthContext.tsx"],"names":["React","AuthContext","createContext","login","register","logout","AuthProvider","authenticationContext","useAuth","useContext"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AASA,MAAMC,WAAW,GAAGD,KAAK,CAACE,aAAN,CAA2C;AAC3DC,EAAAA,KAAK,EAAE,MAAM,CAAG,CAD2C;AAE3DC,EAAAA,QAAQ,EAAE,MAAM,CAAG,CAFwC;AAG3DC,EAAAA,MAAM,EAAE,MAAM,CAAG;AAH0C,CAA3C,CAApB;;AAMA,MAAMC,YAAY,GAAG,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMH,KAAK,GAAG,MAAM,CAAG,CAAvB,CAXuB,CAWC;;;AACxB,QAAMC,QAAQ,GAAG,MAAM,CAAG,CAA1B,CAZuB,CAYI;;;AAC3B,QAAMC,MAAM,GAAG,MAAM,CAAG,CAAxB,CAbuB,CAaE;AACzB;AACA;AACA;;;AAEA,QAAME,qBAAqB,GAAG;AAC1BJ,IAAAA,KAD0B;AAE1BC,IAAAA,QAF0B;AAG1BC,IAAAA;AAH0B,GAA9B;AAMA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,qBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CA3BD;;AA4BA,MAAMC,OAAO,GAAG,MAAMR,KAAK,CAACS,UAAN,CAAiBR,WAAjB,CAAtB;;AACA,SAASK,YAAT,EAAuBE,OAAvB,G,CACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\n// import { FullPageSpinner } from '../components/lib'\n\nexport interface AuthenticationContext {\n    login: () => void;\n    register: () => void;\n    logout: () => void;\n}\n\n\nconst AuthContext = React.createContext<AuthenticationContext>({\n    login: () => { },\n    register: () => { },\n    logout: () => { }\n});\n\nconst AuthProvider = () => {\n    // code for pre-loading the user's information if we have their token in\n    // localStorage goes here\n    // ðŸš¨ this is the important bit.\n    // Normally your provider components render the context provider with a value.\n    // But we post-pone rendering any of the children until after we've determined\n    // whether or not we have a user token and if we do, then we render a spinner\n    // while we go retrieve that user's information.\n    // if (weAreStillWaitingToGetTheUserData) {\n    //     return <FullPageSpinner />\n    // }\n    const login = () => { } // make a login request\n    const register = () => { } // register the user\n    const logout = () => { } // clear the token in localStorage and the user data\n    // note, I'm not bothering to optimize this `value` with React.useMemo here\n    // because this is the top-most component rendered in our app and it will very\n    // rarely re-render/cause a performance problem.\n\n    const authenticationContext = {\n        login,\n        register,\n        logout\n    };\n\n    return (\n        <AuthContext.Provider value={authenticationContext} />\n    )\n}\nconst useAuth = () => React.useContext(AuthContext)\nexport { AuthProvider, useAuth }\n// the UserProvider in user-context.js is basically:\n// const UserProvider = props => (\n//   <UserContext.Provider value={useAuth().data.user} {...props} />\n// )\n// and the useUser hook is basically this:\n// const useUser = () => React.useContext(UserContext)"]},"metadata":{},"sourceType":"module"}