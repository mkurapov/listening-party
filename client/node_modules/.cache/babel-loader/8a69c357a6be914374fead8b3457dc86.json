{"ast":null,"code":"var _jsxFileName = \"/Users/max/dev/listening-party/client/src/pages/Party.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { SocketEvent } from '../common';\nimport axios from 'axios';\nimport { useHistory } from 'react-router';\nimport { useUser } from '../contexts/UserContext';\nimport socket from '../socket';\nimport { SPOTIFY_API } from '../const';\nconst imageStyle = {\n  width: '100vw',\n  height: 'auto'\n};\n\nconst PartyPage = ({\n  match\n}) => {\n  var _currentParty$adminUs, _currentParty$users, _currentParty$playbac, _currentParty$playbac2;\n\n  const {\n    user,\n    isLoading\n  } = useUser();\n  const [currentParty, setCurrentParty] = useState(undefined);\n  const partyId = match.params.id;\n  const history = useHistory();\n  let pollCurrentlyPlaying;\n  useEffect(() => {\n    // NEED TO CHECK IF PARTY EXISTS HERE \n    return () => handleUserLeaving();\n  }, []);\n  useEffect(() => {\n    if (!user || isLoading) {\n      if (!isLoading) {\n        console.log('You are not authed');\n      }\n\n      return;\n    }\n\n    console.log('Logged in as ', user.display_name);\n    socket.on(SocketEvent.USER_LEFT_PARTY_RES, onUserLeftParty);\n    socket.on(SocketEvent.PARTY_PLAYBACK_CHANGED_RES, onPlaybackChanged);\n    socket.on(SocketEvent.PARTY_NOT_FOUND_RES, onPartyNotFound);\n    socket.on(SocketEvent.PARTY_NEW_USER_JOINED_RES, onNewUserJoined);\n    socket.on(SocketEvent.PARTY_JOINED_RES, onPartyJoined);\n    socket.on(SocketEvent.PARTY_CHANGED_ADMIN_RES, onAdminChanged);\n    socket.emit(SocketEvent.PARTY_JOINED_REQ, {\n      user: user,\n      socketId: socket.id,\n      partyId: partyId\n    });\n  }, [user]);\n\n  const onUserLeftParty = party => {\n    console.log('A user left party.');\n    setCurrentParty(party);\n  };\n\n  const onPlaybackChanged = party => {\n    var _party$adminUser;\n\n    console.log('Playback state changed.');\n    const isAdminUser = ((_party$adminUser = party.adminUser) === null || _party$adminUser === void 0 ? void 0 : _party$adminUser.id) === (user === null || user === void 0 ? void 0 : user.id);\n\n    if (!isAdminUser) {\n      if (party.playbackState) {\n        setCurrentlyPlaying(party.playbackState);\n      }\n    }\n\n    setCurrentParty(party);\n  };\n\n  const onNewUserJoined = party => {\n    var _party$users;\n\n    console.log('New user joined,', party.users ? party.users[((_party$users = party.users) === null || _party$users === void 0 ? void 0 : _party$users.length) - 1].display_name : '');\n    setCurrentParty(party);\n  };\n\n  const onPartyNotFound = () => {\n    console.log('This party was not found... redirecting back');\n    setTimeout(() => {\n      history.push('/');\n    }, 2000);\n  };\n\n  const onPartyJoined = party => {\n    setCurrentParty(party);\n\n    if (party.playbackState && party.playbackState.is_playing) {\n      setCurrentlyPlaying(party.playbackState);\n    }\n  };\n\n  const onAdminChanged = party => {\n    var _party$adminUser2;\n\n    clearInterval(pollCurrentlyPlaying);\n\n    if (((_party$adminUser2 = party.adminUser) === null || _party$adminUser2 === void 0 ? void 0 : _party$adminUser2.id) === (user === null || user === void 0 ? void 0 : user.id)) {\n      console.log('Youve been assigned admin.');\n      pollCurrentlyPlaying = setInterval(() => {\n        getCurrentlyPlaying(party.id);\n      }, 5000);\n    }\n\n    setCurrentParty(party);\n  };\n\n  const handleUserLeaving = () => {\n    socket.off(SocketEvent.USER_LEFT_PARTY_RES, onUserLeftParty);\n    socket.off(SocketEvent.PARTY_PLAYBACK_CHANGED_RES, onPlaybackChanged);\n    socket.off(SocketEvent.PARTY_NOT_FOUND_RES, onPartyNotFound);\n    socket.off(SocketEvent.PARTY_NEW_USER_JOINED_RES, onNewUserJoined);\n    socket.off(SocketEvent.PARTY_JOINED_RES, onPartyJoined);\n    socket.off(SocketEvent.PARTY_CHANGED_ADMIN_RES, onAdminChanged);\n    console.log('Leaving party.');\n    clearInterval(pollCurrentlyPlaying);\n    socket.emit(SocketEvent.USER_LEFT_PARTY_REQ);\n  };\n\n  const setCurrentlyPlaying = playbackState => {\n    console.log('setting currently playing...', playbackState);\n    const args = {\n      uris: [playbackState.item.uri]\n    };\n    axios.put(SPOTIFY_API.PLAY, args).then(() => console.log('Playing new song: ', playbackState.item.name)).catch(err => {\n      const error = err.response.data.error;\n\n      if (error.reason === \"NO_ACTIVE_DEVICE\") {\n        console.log('Could not play song. No active device found.');\n      } else if (error.reason === \"PREMIUM_REQUIRED\") {\n        console.log('Could not play song. Premium required.');\n      } else {\n        console.log('Could not play song. Error: ', error);\n      }\n    });\n  };\n\n  const getCurrentlyPlaying = partyId => {\n    console.log('Getting currently playing...');\n    axios.get(SPOTIFY_API.CURRENTLY_PLAYING).then(res => {\n      if (!res.data || !res.data.item) {\n        console.log('Nothing is playing, its an ad, or you are in private mode.');\n        return;\n      }\n\n      socket.emit(SocketEvent.PARTY_PLAYBACK_REQ, {\n        playbackState: res.data,\n        partyId: partyId\n      });\n    }).catch(err => {\n      console.log('could not get currently playing');\n    });\n  }; // const onPartyJoinedUnauthed = (numberOfUsers: number) => {\n  //     console.log('PARTY JOINED BACK')\n  //     setNumberOfUsers(numberOfUsers);\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, user && user.id ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }, \"A duper dope party\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }, \"Hi, \", user.display_name, \"!\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }, \"The DJ is \", currentParty === null || currentParty === void 0 ? void 0 : (_currentParty$adminUs = currentParty.adminUser) === null || _currentParty$adminUs === void 0 ? void 0 : _currentParty$adminUs.display_name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }\n  }, \"Users in party: \", currentParty === null || currentParty === void 0 ? void 0 : (_currentParty$users = currentParty.users) === null || _currentParty$users === void 0 ? void 0 : _currentParty$users.map(user => user.display_name).join(', ')), (currentParty === null || currentParty === void 0 ? void 0 : currentParty.playbackState) ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"song\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 29\n    }\n  }, \"Currently playing\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 29\n    }\n  }, currentParty === null || currentParty === void 0 ? void 0 : (_currentParty$playbac = currentParty.playbackState) === null || _currentParty$playbac === void 0 ? void 0 : _currentParty$playbac.item.name), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 29\n    }\n  }, currentParty === null || currentParty === void 0 ? void 0 : (_currentParty$playbac2 = currentParty.playbackState) === null || _currentParty$playbac2 === void 0 ? void 0 : _currentParty$playbac2.item.album.artists[0].name), /*#__PURE__*/React.createElement(\"img\", {\n    style: imageStyle,\n    src: currentParty.playbackState.item.album.images[0].url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 29\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 25\n    }\n  }, \"No tracks playing\")) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, \"This is a party, but you aint authed.\"));\n};\n\nexport default PartyPage;","map":{"version":3,"sources":["/Users/max/dev/listening-party/client/src/pages/Party.tsx"],"names":["React","useEffect","useState","SocketEvent","axios","useHistory","useUser","socket","SPOTIFY_API","imageStyle","width","height","PartyPage","match","user","isLoading","currentParty","setCurrentParty","undefined","partyId","params","id","history","pollCurrentlyPlaying","handleUserLeaving","console","log","display_name","on","USER_LEFT_PARTY_RES","onUserLeftParty","PARTY_PLAYBACK_CHANGED_RES","onPlaybackChanged","PARTY_NOT_FOUND_RES","onPartyNotFound","PARTY_NEW_USER_JOINED_RES","onNewUserJoined","PARTY_JOINED_RES","onPartyJoined","PARTY_CHANGED_ADMIN_RES","onAdminChanged","emit","PARTY_JOINED_REQ","socketId","party","isAdminUser","adminUser","playbackState","setCurrentlyPlaying","users","length","setTimeout","push","is_playing","clearInterval","setInterval","getCurrentlyPlaying","off","USER_LEFT_PARTY_REQ","args","uris","item","uri","put","PLAY","then","name","catch","err","error","response","data","reason","get","CURRENTLY_PLAYING","res","PARTY_PLAYBACK_REQ","map","join","album","artists","images","url"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport io from 'socket.io-client'\nimport { SocketEvent, Party, PlaybackState } from '../common';\nimport axios, { AxiosResponse } from 'axios';\nimport Button from '../components/Button';\nimport { getHashParams } from '../helpers/helpers';\nimport { withRouter, match, useHistory } from 'react-router';\n\nimport { useUser } from '../contexts/UserContext';\nimport socket from '../socket';\nimport { User } from '../common';\nimport { SPOTIFY_API } from '../const';\n\ninterface Props {\n    match: any;\n}\n\nconst imageStyle = {\n    width: '100vw',\n    height: 'auto'\n}\n\nconst PartyPage: React.FC<Props> = ({ match }): React.ReactElement => {\n    const { user, isLoading } = useUser();\n    const [currentParty, setCurrentParty] = useState<Party | undefined>(undefined);\n    const partyId = match.params.id;\n    const history = useHistory();\n    let pollCurrentlyPlaying: any;\n\n    useEffect(() => {\n        // NEED TO CHECK IF PARTY EXISTS HERE \n        return () => handleUserLeaving();\n    }, [])\n\n    useEffect(() => {\n        if (!user || isLoading) {\n            if (!isLoading) {\n                console.log('You are not authed');\n            }\n            return;\n        }\n\n        console.log('Logged in as ', user.display_name);\n        socket.on(SocketEvent.USER_LEFT_PARTY_RES, onUserLeftParty);\n        socket.on(SocketEvent.PARTY_PLAYBACK_CHANGED_RES, onPlaybackChanged);\n        socket.on(SocketEvent.PARTY_NOT_FOUND_RES, onPartyNotFound);\n        socket.on(SocketEvent.PARTY_NEW_USER_JOINED_RES, onNewUserJoined);\n        socket.on(SocketEvent.PARTY_JOINED_RES, onPartyJoined);\n        socket.on(SocketEvent.PARTY_CHANGED_ADMIN_RES, onAdminChanged);\n\n        socket.emit(SocketEvent.PARTY_JOINED_REQ, { user: user, socketId: socket.id, partyId: partyId })\n    }, [user])\n\n    const onUserLeftParty = (party: Party) => {\n        console.log('A user left party.');\n        setCurrentParty(party);\n    }\n\n    const onPlaybackChanged = (party: Party) => {\n        console.log('Playback state changed.');\n        const isAdminUser = party.adminUser?.id === user?.id;\n        if (!isAdminUser) {\n            if (party.playbackState) {\n                setCurrentlyPlaying(party.playbackState);\n            }\n        }\n\n        setCurrentParty(party);\n    }\n\n    const onNewUserJoined = (party: Party) => {\n        console.log('New user joined,', party.users ? party.users[party.users?.length - 1].display_name : '');\n        setCurrentParty(party);\n    }\n\n    const onPartyNotFound = () => {\n        console.log('This party was not found... redirecting back');\n        setTimeout(() => {\n            history.push('/');\n        }, 2000);\n    }\n\n    const onPartyJoined = (party: Party) => {\n        setCurrentParty(party);\n        if (party.playbackState && party.playbackState.is_playing) {\n            setCurrentlyPlaying(party.playbackState);\n        }\n    }\n\n    const onAdminChanged = (party: Party) => {\n        clearInterval(pollCurrentlyPlaying);\n        if (party.adminUser?.id === user?.id) {\n            console.log('Youve been assigned admin.')\n            pollCurrentlyPlaying = setInterval(() => {\n                getCurrentlyPlaying(party.id);\n            }, 5000);\n        }\n        setCurrentParty(party);\n    }\n\n    const handleUserLeaving = () => {\n        socket.off(SocketEvent.USER_LEFT_PARTY_RES, onUserLeftParty);\n        socket.off(SocketEvent.PARTY_PLAYBACK_CHANGED_RES, onPlaybackChanged);\n        socket.off(SocketEvent.PARTY_NOT_FOUND_RES, onPartyNotFound);\n        socket.off(SocketEvent.PARTY_NEW_USER_JOINED_RES, onNewUserJoined);\n        socket.off(SocketEvent.PARTY_JOINED_RES, onPartyJoined);\n        socket.off(SocketEvent.PARTY_CHANGED_ADMIN_RES, onAdminChanged);\n\n        console.log('Leaving party.')\n\n        clearInterval(pollCurrentlyPlaying);\n        socket.emit(SocketEvent.USER_LEFT_PARTY_REQ)\n    }\n\n    const setCurrentlyPlaying = (playbackState: PlaybackState) => {\n        console.log('setting currently playing...', playbackState);\n        const args = {\n            uris: [playbackState.item.uri]\n        }\n        axios.put(SPOTIFY_API.PLAY, args)\n            .then(() => console.log('Playing new song: ', playbackState.item.name))\n            .catch(err => {\n                const error = err.response.data.error;\n                if (error.reason === \"NO_ACTIVE_DEVICE\") {\n                    console.log('Could not play song. No active device found.')\n                } else if (error.reason === \"PREMIUM_REQUIRED\") {\n                    console.log('Could not play song. Premium required.')\n                } else {\n                    console.log('Could not play song. Error: ', error);\n                }\n            });\n    }\n\n    const getCurrentlyPlaying = (partyId: string) => {\n        console.log('Getting currently playing...');\n        axios.get(SPOTIFY_API.CURRENTLY_PLAYING)\n            .then((res: AxiosResponse<PlaybackState>) => {\n                if (!res.data || !res.data.item) {\n                    console.log('Nothing is playing, its an ad, or you are in private mode.');\n                    return;\n                }\n                socket.emit(SocketEvent.PARTY_PLAYBACK_REQ, { playbackState: res.data, partyId: partyId })\n            })\n            .catch(err => { console.log('could not get currently playing') })\n    }\n\n\n\n\n    // const onPartyJoinedUnauthed = (numberOfUsers: number) => {\n    //     console.log('PARTY JOINED BACK')\n    //     setNumberOfUsers(numberOfUsers);\n    // }\n\n    return (\n        <div>\n            {user && user.id ?\n                <div>\n                    <h1>A duper dope party</h1>\n                    <h2>Hi, {user.display_name}!</h2>\n                    <div>The DJ is {currentParty?.adminUser?.display_name}</div>\n                    <div>Users in party: {currentParty?.users?.map(user => user.display_name).join(', ')}</div>\n                    {currentParty?.playbackState ?\n                        <div>\n                            <div className=\"song\">Currently playing</div>\n                            <h3>{currentParty?.playbackState?.item.name}</h3>\n                            <h3>{currentParty?.playbackState?.item.album.artists[0].name}</h3>\n                            <img style={imageStyle} src={currentParty.playbackState.item.album.images[0].url}></img>\n                        </div>\n                        :\n                        <div>No tracks playing</div>\n                    }\n                </div>\n                :\n                <div>This is a party, but you aint authed.</div>}\n        </div>);\n\n};\n\nexport default PartyPage;\n"]},"metadata":{},"sourceType":"module"}