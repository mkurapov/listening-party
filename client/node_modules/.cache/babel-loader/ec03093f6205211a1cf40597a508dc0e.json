{"ast":null,"code":"var _jsxFileName = \"/Users/max/dev/listening-party/client/src/contexts/AuthContext.tsx\";\nimport React from 'react';\nimport { FullPageSpinner } from '../components/lib';\nconst AuthContext = React.createContext();\n\nfunction AuthProvider(props) {\n  // code for pre-loading the user's information if we have their token in\n  // localStorage goes here\n  // ðŸš¨ this is the important bit.\n  // Normally your provider components render the context provider with a value.\n  // But we post-pone rendering any of the children until after we've determined\n  // whether or not we have a user token and if we do, then we render a spinner\n  // while we go retrieve that user's information.\n  if (weAreStillWaitingToGetTheUserData) {\n    return /*#__PURE__*/React.createElement(FullPageSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 16\n      }\n    });\n  }\n\n  const login = () => {}; // make a login request\n\n\n  const register = () => {}; // register the user\n\n\n  const logout = () => {}; // clear the token in localStorage and the user data\n  // note, I'm not bothering to optimize this `value` with React.useMemo here\n  // because this is the top-most component rendered in our app and it will very\n  // rarely re-render/cause a performance problem.\n\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, Object.assign({\n    value: {\n      data,\n      login,\n      logout,\n      register\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }));\n}\n\nconst useAuth = () => React.useContext(AuthContext);\n\nexport { AuthProvider, useAuth }; // the UserProvider in user-context.js is basically:\n// const UserProvider = props => (\n//   <UserContext.Provider value={useAuth().data.user} {...props} />\n// )\n// and the useUser hook is basically this:\n// const useUser = () => React.useContext(UserContext)","map":{"version":3,"sources":["/Users/max/dev/listening-party/client/src/contexts/AuthContext.tsx"],"names":["React","FullPageSpinner","AuthContext","createContext","AuthProvider","props","weAreStillWaitingToGetTheUserData","login","register","logout","data","useAuth","useContext"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,MAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,EAApB;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIC,iCAAJ,EAAuC;AACnC,wBAAO,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AACD,QAAMC,KAAK,GAAG,MAAM,CAAG,CAAvB,CAXyB,CAWD;;;AACxB,QAAMC,QAAQ,GAAG,MAAM,CAAG,CAA1B,CAZyB,CAYE;;;AAC3B,QAAMC,MAAM,GAAG,MAAM,CAAG,CAAxB,CAbyB,CAaA;AACzB;AACA;AACA;;;AACA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAF;AAAQH,MAAAA,KAAR;AAAeE,MAAAA,MAAf;AAAuBD,MAAAA;AAAvB;AAA7B,KAAoEH,KAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAGH;;AACD,MAAMM,OAAO,GAAG,MAAMX,KAAK,CAACY,UAAN,CAAiBV,WAAjB,CAAtB;;AACA,SAASE,YAAT,EAAuBO,OAAvB,G,CACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\nimport { FullPageSpinner } from '../components/lib'\nconst AuthContext = React.createContext()\nfunction AuthProvider(props) {\n    // code for pre-loading the user's information if we have their token in\n    // localStorage goes here\n    // ðŸš¨ this is the important bit.\n    // Normally your provider components render the context provider with a value.\n    // But we post-pone rendering any of the children until after we've determined\n    // whether or not we have a user token and if we do, then we render a spinner\n    // while we go retrieve that user's information.\n    if (weAreStillWaitingToGetTheUserData) {\n        return <FullPageSpinner />\n    }\n    const login = () => { } // make a login request\n    const register = () => { } // register the user\n    const logout = () => { } // clear the token in localStorage and the user data\n    // note, I'm not bothering to optimize this `value` with React.useMemo here\n    // because this is the top-most component rendered in our app and it will very\n    // rarely re-render/cause a performance problem.\n    return (\n        <AuthContext.Provider value={{ data, login, logout, register }} {...props} />\n    )\n}\nconst useAuth = () => React.useContext(AuthContext)\nexport { AuthProvider, useAuth }\n// the UserProvider in user-context.js is basically:\n// const UserProvider = props => (\n//   <UserContext.Provider value={useAuth().data.user} {...props} />\n// )\n// and the useUser hook is basically this:\n// const useUser = () => React.useContext(UserContext)"]},"metadata":{},"sourceType":"module"}