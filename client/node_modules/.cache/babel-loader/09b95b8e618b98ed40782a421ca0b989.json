{"ast":null,"code":"var _jsxFileName = \"/Users/max/dev/listening-party/client/src/contexts/UserContext.tsx\";\nimport React, { useState, useEffect, useMemo, createContext, useContext } from \"react\";\nimport axios from 'axios';\nimport { SocketEvent } from '../common';\nimport { getHashParams, getTimeWithMinutesOffset } from '../helpers/helpers';\nimport { SPOTIFY_API, APP_API } from \"../const\";\nimport socket from \"../socket\";\nconst UserContext = createContext({\n  user: undefined,\n  isLoading: false,\n  logout: () => {}\n});\n\nconst UserProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  let storedUser;\n  let storedAccessToken;\n  let storedRefreshToken;\n  useEffect(() => {\n    storedUser = localStorage.getItem('user');\n    storedAccessToken = localStorage.getItem('access_token');\n    storedRefreshToken = localStorage.getItem('refresh_token');\n\n    if (!storedUser || !storedAccessToken || !storedRefreshToken) {\n      if (!window.location.hash) return;\n      login();\n      return;\n    }\n\n    const expiryDate = localStorage.getItem('expiry_time');\n\n    if (expiryDate && new Date().getTime() > parseInt(expiryDate)) {\n      console.log('expired');\n      getNewAccessToken().then(res => {\n        console.log(res);\n      });\n    } else {\n      if (storedUser) {\n        const userObj = storedUser;\n        setUser(userObj);\n        setIsLoading(false);\n        socket.emit(SocketEvent.USER_CONNECTED_REQ, userObj.id);\n      }\n    }\n  }, []);\n\n  const login = () => {\n    let locationArgs = getHashParams(window.location.hash);\n    setAuthheader(locationArgs.access_token);\n    axios.get(SPOTIFY_API.ME).then(res => {\n      const user = res.data;\n      console.log(user);\n      setUser(user);\n      setIsLoading(false);\n      socket.emit(SocketEvent.USER_CONNECTED_REQ, user.id);\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('access_token', locationArgs.access_token);\n      localStorage.setItem('refresh_token', locationArgs.refresh_token);\n      localStorage.setItem('expiry_time', getTimeWithMinutesOffset(1).getTime().toString());\n    });\n  };\n\n  const logout = () => {\n    // socket.emit(SocketEvent.USER_DISCONNECTED_REQ, user);\n    setUser(undefined);\n    localStorage.clear();\n  };\n\n  const getNewAccessToken = () => {\n    return axios.get(APP_API.REFRESH_TOKEN, {\n      params: {\n        refresh_token: storedRefreshToken\n      }\n    });\n  };\n\n  const setAuthheader = accessToken => {\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + accessToken;\n  };\n\n  const SettingsContext = useMemo(() => ({\n    user,\n    isLoading,\n    logout\n  }), [user, logout]);\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: SettingsContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, children);\n};\n\nconst useUser = () => useContext(UserContext);\n\nexport { UserProvider, useUser };","map":{"version":3,"sources":["/Users/max/dev/listening-party/client/src/contexts/UserContext.tsx"],"names":["React","useState","useEffect","useMemo","createContext","useContext","axios","SocketEvent","getHashParams","getTimeWithMinutesOffset","SPOTIFY_API","APP_API","socket","UserContext","user","undefined","isLoading","logout","UserProvider","children","setUser","setIsLoading","storedUser","storedAccessToken","storedRefreshToken","localStorage","getItem","window","location","hash","login","expiryDate","Date","getTime","parseInt","console","log","getNewAccessToken","then","res","userObj","emit","USER_CONNECTED_REQ","id","locationArgs","setAuthheader","access_token","get","ME","data","setItem","JSON","stringify","refresh_token","toString","clear","REFRESH_TOKEN","params","accessToken","defaults","headers","common","SettingsContext","useUser"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, createContext, useContext } from \"react\";\n\nimport axios, { AxiosResponse } from 'axios';\nimport { User, SocketEvent } from '../common';\n\nimport { getHashParams, getTimeWithMinutesOffset } from '../helpers/helpers';\nimport { SPOTIFY_API, APP_API } from \"../const\";\nimport socket from \"../socket\";\n\ninterface AuthHashParams {\n    access_token: string;\n    refresh_token: string;\n    token_type: string;\n}\n\ninterface RefreshAccessTokenResponse {\n    access_token: string;\n}\n\n\nexport interface UserContext {\n    user: User | undefined;\n    isLoading: boolean;\n    logout: () => void;\n}\n\nconst UserContext = createContext<UserContext>({\n    user: undefined,\n    isLoading: false,\n    logout: () => { },\n});\n\nconst UserProvider: React.FC = ({ children }): React.ReactElement => {\n    const [user, setUser] = useState<User>();\n    const [isLoading, setIsLoading] = useState(true);\n    let storedUser: string | null;\n    let storedAccessToken: string | null;\n    let storedRefreshToken: string | null;\n\n    useEffect(() => {\n        storedUser = localStorage.getItem('user');\n        storedAccessToken = localStorage.getItem('access_token');\n        storedRefreshToken = localStorage.getItem('refresh_token');\n\n        if (!storedUser || !storedAccessToken || !storedRefreshToken) {\n            if (!window.location.hash) return;\n            login();\n            return;\n        }\n\n        const expiryDate = localStorage.getItem('expiry_time');\n        if (expiryDate && new Date().getTime() > parseInt(expiryDate)) {\n            console.log('expired');\n            getNewAccessToken().then(res => {\n                console.log(res);\n            });\n        } else {\n            if (storedUser) {\n                const userObj = storedUser as unknown as User;\n                setUser(userObj);\n                setIsLoading(false);\n                socket.emit(SocketEvent.USER_CONNECTED_REQ, userObj.id);\n            }\n        }\n    }, [])\n\n    const login = (): void => {\n        let locationArgs: AuthHashParams = getHashParams(window.location.hash);\n        setAuthheader(locationArgs.access_token);\n        axios.get(SPOTIFY_API.ME).then((res: AxiosResponse<User>) => {\n            const user = res.data;\n            console.log(user);\n            setUser(user);\n            setIsLoading(false);\n            socket.emit(SocketEvent.USER_CONNECTED_REQ, user.id);\n            localStorage.setItem('user', JSON.stringify(user));\n            localStorage.setItem('access_token', locationArgs.access_token);\n            localStorage.setItem('refresh_token', locationArgs.refresh_token);\n            localStorage.setItem('expiry_time', getTimeWithMinutesOffset(1).getTime().toString())\n        });\n    }\n\n    const logout = (): void => {\n        // socket.emit(SocketEvent.USER_DISCONNECTED_REQ, user);\n        setUser(undefined);\n        localStorage.clear();\n    }\n\n    const getNewAccessToken = (): Promise<AxiosResponse<RefreshAccessTokenResponse>> => {\n        return axios.get(APP_API.REFRESH_TOKEN, {\n            params: {\n                refresh_token: storedRefreshToken\n            }\n        });\n    }\n\n    const setAuthheader = (accessToken: string) => {\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + accessToken;\n    }\n\n\n    const SettingsContext = useMemo(() => ({\n        user,\n        isLoading,\n        logout\n    }), [user, logout]);\n\n    return (\n        <UserContext.Provider value={SettingsContext}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n\nconst useUser = () => useContext(UserContext);\nexport { UserProvider, useUser };\n\n"]},"metadata":{},"sourceType":"module"}