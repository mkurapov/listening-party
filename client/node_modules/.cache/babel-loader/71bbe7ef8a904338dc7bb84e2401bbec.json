{"ast":null,"code":"var _jsxFileName = \"/Users/max/dev/listening-party/client/src/contexts/UserContext.tsx\";\nimport React, { useState, useEffect, useMemo, createContext, useContext } from \"react\";\nimport axios from 'axios';\nimport { SocketEvent } from '../common';\nimport { getHashParams, getTimeWithMinutesOffset } from '../helpers/helpers';\nimport { SPOTIFY_API, APP_API } from \"../const\";\nimport socket from \"../socket\";\nconst UserContext = createContext({\n  user: undefined,\n  isLoading: false,\n  logout: () => {}\n});\n\nconst UserProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  let storedUser;\n  let storedAccessToken;\n  let storedRefreshToken;\n  useEffect(() => {\n    storedUser = localStorage.getItem('user');\n    storedAccessToken = localStorage.getItem('access_token');\n    storedRefreshToken = localStorage.getItem('refresh_token');\n\n    if (!storedUser || !storedAccessToken || !storedRefreshToken) {\n      if (!window.location.hash) return;\n      console.log('loggin in ...');\n      login();\n      return;\n    }\n\n    const parsedUser = JSON.parse(storedUser);\n    const expiryDate = localStorage.getItem('expiry_time');\n\n    if (expiryDate && new Date().getTime() > parseInt(expiryDate)) {\n      console.log('expired');\n      getNewAccessToken(storedRefreshToken).then(res => {\n        updateUser(parsedUser);\n        setAuthheader(res.data.access_token);\n        localStorage.setItem('access_token', res.data.access_token);\n        localStorage.setItem('expiry_time', getTimeWithMinutesOffset(59).getTime().toString());\n      });\n    } else {\n      setAuthheader(storedAccessToken);\n      updateUser(parsedUser);\n    }\n  }, []);\n\n  const login = () => {\n    let locationArgs = getHashParams(window.location.hash);\n    setAuthheader(locationArgs.access_token);\n    axios.get(SPOTIFY_API.ME).then(res => {\n      updateUser(res.data);\n      localStorage.setItem('user', JSON.stringify(res.data));\n      localStorage.setItem('access_token', locationArgs.access_token);\n      localStorage.setItem('refresh_token', locationArgs.refresh_token);\n      localStorage.setItem('expiry_time', getTimeWithMinutesOffset(1).getTime().toString());\n    });\n  };\n\n  const updateUser = user => {\n    setUser(user);\n    setIsLoading(false);\n    socket.emit(SocketEvent.USER_LOGGEDIN_REQ, user.id);\n  };\n\n  const logout = () => {\n    setUser(undefined);\n    localStorage.clear();\n  };\n\n  const getNewAccessToken = refreshToken => {\n    return axios.get(APP_API.REFRESH_TOKEN, {\n      params: {\n        refresh_token: refreshToken\n      }\n    });\n  };\n\n  const setAuthheader = accessToken => {\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + accessToken;\n  };\n\n  const SettingsContext = useMemo(() => ({\n    user,\n    isLoading,\n    logout\n  }), [user, logout]);\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: SettingsContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, children);\n};\n\nconst useUser = () => useContext(UserContext);\n\nexport { UserProvider, useUser };","map":{"version":3,"sources":["/Users/max/dev/listening-party/client/src/contexts/UserContext.tsx"],"names":["React","useState","useEffect","useMemo","createContext","useContext","axios","SocketEvent","getHashParams","getTimeWithMinutesOffset","SPOTIFY_API","APP_API","socket","UserContext","user","undefined","isLoading","logout","UserProvider","children","setUser","setIsLoading","storedUser","storedAccessToken","storedRefreshToken","localStorage","getItem","window","location","hash","console","log","login","parsedUser","JSON","parse","expiryDate","Date","getTime","parseInt","getNewAccessToken","then","res","updateUser","setAuthheader","data","access_token","setItem","toString","locationArgs","get","ME","stringify","refresh_token","emit","USER_LOGGEDIN_REQ","id","clear","refreshToken","REFRESH_TOKEN","params","accessToken","defaults","headers","common","SettingsContext","useUser"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAkDC,OAAlD,EAA2DC,aAA3D,EAA0EC,UAA1E,QAA4F,OAA5F;AAEA,OAAOC,KAAP,MAAqC,OAArC;AACA,SAAeC,WAAf,QAAkC,WAAlC;AAEA,SAASC,aAAT,EAAwBC,wBAAxB,QAAwD,oBAAxD;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,UAArC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAmBA,MAAMC,WAAW,GAAGT,aAAa,CAAc;AAC3CU,EAAAA,IAAI,EAAEC,SADqC;AAE3CC,EAAAA,SAAS,EAAE,KAFgC;AAG3CC,EAAAA,MAAM,EAAE,MAAM,CAAG;AAH0B,CAAd,CAAjC;;AAMA,MAAMC,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsC;AACjE,QAAM,CAACL,IAAD,EAAOM,OAAP,IAAkBnB,QAAQ,EAAhC;AACA,QAAM,CAACe,SAAD,EAAYK,YAAZ,IAA4BpB,QAAQ,CAAC,IAAD,CAA1C;AACA,MAAIqB,UAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,kBAAJ;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACZoB,IAAAA,UAAU,GAAGG,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb;AACAH,IAAAA,iBAAiB,GAAGE,YAAY,CAACC,OAAb,CAAqB,cAArB,CAApB;AACAF,IAAAA,kBAAkB,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAArB;;AAEA,QAAI,CAACJ,UAAD,IAAe,CAACC,iBAAhB,IAAqC,CAACC,kBAA1C,EAA8D;AAC1D,UAAI,CAACG,MAAM,CAACC,QAAP,CAAgBC,IAArB,EAA2B;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAC,MAAAA,KAAK;AACL;AACH;;AAED,UAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWb,UAAX,CAAnB;AAEA,UAAMc,UAAU,GAAGX,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAnB;;AACA,QAAIU,UAAU,IAAI,IAAIC,IAAJ,GAAWC,OAAX,KAAuBC,QAAQ,CAACH,UAAD,CAAjD,EAA+D;AAC3DN,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAS,MAAAA,iBAAiB,CAAChB,kBAAD,CAAjB,CAAsCiB,IAAtC,CAA2CC,GAAG,IAAI;AAC9CC,QAAAA,UAAU,CAACV,UAAD,CAAV;AACAW,QAAAA,aAAa,CAACF,GAAG,CAACG,IAAJ,CAASC,YAAV,CAAb;AACArB,QAAAA,YAAY,CAACsB,OAAb,CAAqB,cAArB,EAAqCL,GAAG,CAACG,IAAJ,CAASC,YAA9C;AACArB,QAAAA,YAAY,CAACsB,OAAb,CAAqB,aAArB,EAAoCtC,wBAAwB,CAAC,EAAD,CAAxB,CAA6B6B,OAA7B,GAAuCU,QAAvC,EAApC;AACH,OALD;AAMH,KARD,MAQO;AACHJ,MAAAA,aAAa,CAACrB,iBAAD,CAAb;AACAoB,MAAAA,UAAU,CAACV,UAAD,CAAV;AACH;AACJ,GA3BQ,EA2BN,EA3BM,CAAT;;AA6BA,QAAMD,KAAK,GAAG,MAAY;AACtB,QAAIiB,YAA4B,GAAGzC,aAAa,CAACmB,MAAM,CAACC,QAAP,CAAgBC,IAAjB,CAAhD;AACAe,IAAAA,aAAa,CAACK,YAAY,CAACH,YAAd,CAAb;AACAxC,IAAAA,KAAK,CAAC4C,GAAN,CAAUxC,WAAW,CAACyC,EAAtB,EAA0BV,IAA1B,CAAgCC,GAAD,IAA8B;AACzDC,MAAAA,UAAU,CAACD,GAAG,CAACG,IAAL,CAAV;AACApB,MAAAA,YAAY,CAACsB,OAAb,CAAqB,MAArB,EAA6Bb,IAAI,CAACkB,SAAL,CAAeV,GAAG,CAACG,IAAnB,CAA7B;AACApB,MAAAA,YAAY,CAACsB,OAAb,CAAqB,cAArB,EAAqCE,YAAY,CAACH,YAAlD;AACArB,MAAAA,YAAY,CAACsB,OAAb,CAAqB,eAArB,EAAsCE,YAAY,CAACI,aAAnD;AACA5B,MAAAA,YAAY,CAACsB,OAAb,CAAqB,aAArB,EAAoCtC,wBAAwB,CAAC,CAAD,CAAxB,CAA4B6B,OAA5B,GAAsCU,QAAtC,EAApC;AACH,KAND;AAOH,GAVD;;AAYA,QAAML,UAAU,GAAI7B,IAAD,IAAsB;AACrCM,IAAAA,OAAO,CAACN,IAAD,CAAP;AACAO,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAT,IAAAA,MAAM,CAAC0C,IAAP,CAAY/C,WAAW,CAACgD,iBAAxB,EAA2CzC,IAAI,CAAC0C,EAAhD;AACH,GAJD;;AAMA,QAAMvC,MAAM,GAAG,MAAY;AACvBG,IAAAA,OAAO,CAACL,SAAD,CAAP;AACAU,IAAAA,YAAY,CAACgC,KAAb;AACH,GAHD;;AAKA,QAAMjB,iBAAiB,GAAIkB,YAAD,IAA8E;AACpG,WAAOpD,KAAK,CAAC4C,GAAN,CAAUvC,OAAO,CAACgD,aAAlB,EAAiC;AACpCC,MAAAA,MAAM,EAAE;AACJP,QAAAA,aAAa,EAAEK;AADX;AAD4B,KAAjC,CAAP;AAKH,GAND;;AAQA,QAAMd,aAAa,GAAIiB,WAAD,IAAyB;AAC3CvD,IAAAA,KAAK,CAACwD,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,YAAYH,WAA7D;AACH,GAFD;;AAIA,QAAMI,eAAe,GAAG9D,OAAO,CAAC,OAAO;AACnCW,IAAAA,IADmC;AAEnCE,IAAAA,SAFmC;AAGnCC,IAAAA;AAHmC,GAAP,CAAD,EAI3B,CAACH,IAAD,EAAOG,MAAP,CAJ2B,CAA/B;AAMA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEgD,eAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK9C,QADL,CADJ;AAKH,CAlFD;;AAoFA,MAAM+C,OAAO,GAAG,MAAM7D,UAAU,CAACQ,WAAD,CAAhC;;AACA,SAASK,YAAT,EAAuBgD,OAAvB","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, createContext, useContext } from \"react\";\n\nimport axios, { AxiosResponse } from 'axios';\nimport { User, SocketEvent } from '../common';\n\nimport { getHashParams, getTimeWithMinutesOffset } from '../helpers/helpers';\nimport { SPOTIFY_API, APP_API } from \"../const\";\nimport socket from \"../socket\";\n\ninterface AuthHashParams {\n    access_token: string;\n    refresh_token: string;\n    token_type: string;\n}\n\ninterface RefreshAccessTokenResponse {\n    access_token: string;\n}\n\n\nexport interface UserContext {\n    user: User | undefined;\n    isLoading: boolean;\n    logout: () => void;\n}\n\nconst UserContext = createContext<UserContext>({\n    user: undefined,\n    isLoading: false,\n    logout: () => { },\n});\n\nconst UserProvider: React.FC = ({ children }): React.ReactElement => {\n    const [user, setUser] = useState<User>();\n    const [isLoading, setIsLoading] = useState(true);\n    let storedUser: string | null;\n    let storedAccessToken: string | null;\n    let storedRefreshToken: string | null;\n\n    useEffect(() => {\n        storedUser = localStorage.getItem('user');\n        storedAccessToken = localStorage.getItem('access_token');\n        storedRefreshToken = localStorage.getItem('refresh_token');\n\n        if (!storedUser || !storedAccessToken || !storedRefreshToken) {\n            if (!window.location.hash) return;\n            console.log('loggin in ...')\n            login();\n            return;\n        }\n\n        const parsedUser = JSON.parse(storedUser) as User;\n\n        const expiryDate = localStorage.getItem('expiry_time');\n        if (expiryDate && new Date().getTime() > parseInt(expiryDate)) {\n            console.log('expired');\n            getNewAccessToken(storedRefreshToken).then(res => {\n                updateUser(parsedUser);\n                setAuthheader(res.data.access_token);\n                localStorage.setItem('access_token', res.data.access_token);\n                localStorage.setItem('expiry_time', getTimeWithMinutesOffset(59).getTime().toString())\n            });\n        } else {\n            setAuthheader(storedAccessToken);\n            updateUser(parsedUser);\n        }\n    }, [])\n\n    const login = (): void => {\n        let locationArgs: AuthHashParams = getHashParams(window.location.hash);\n        setAuthheader(locationArgs.access_token);\n        axios.get(SPOTIFY_API.ME).then((res: AxiosResponse<User>) => {\n            updateUser(res.data);\n            localStorage.setItem('user', JSON.stringify(res.data));\n            localStorage.setItem('access_token', locationArgs.access_token);\n            localStorage.setItem('refresh_token', locationArgs.refresh_token);\n            localStorage.setItem('expiry_time', getTimeWithMinutesOffset(1).getTime().toString())\n        });\n    }\n\n    const updateUser = (user: User): void => {\n        setUser(user);\n        setIsLoading(false);\n        socket.emit(SocketEvent.USER_LOGGEDIN_REQ, user.id);\n    }\n\n    const logout = (): void => {\n        setUser(undefined);\n        localStorage.clear();\n    }\n\n    const getNewAccessToken = (refreshToken: string): Promise<AxiosResponse<RefreshAccessTokenResponse>> => {\n        return axios.get(APP_API.REFRESH_TOKEN, {\n            params: {\n                refresh_token: refreshToken\n            }\n        });\n    }\n\n    const setAuthheader = (accessToken: string) => {\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + accessToken;\n    }\n\n    const SettingsContext = useMemo(() => ({\n        user,\n        isLoading,\n        logout\n    }), [user, logout]);\n\n    return (\n        <UserContext.Provider value={SettingsContext}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n\nconst useUser = () => useContext(UserContext);\nexport { UserProvider, useUser };\n\n"]},"metadata":{},"sourceType":"module"}